// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package model

import (
	"context"
)

const selectAccountByID = `-- name: SelectAccountByID :one
SELECT id, name, email, active, fav_color, fav_numbers, properties, created_at
FROM accounts
WHERE id = $1
`

func (q *Queries) SelectAccountByID(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, selectAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Active,
		&i.FavColor,
		&i.FavNumbers,
		&i.Properties,
		&i.CreatedAt,
	)
	return i, err
}

const selectAllAccounts = `-- name: SelectAllAccounts :many
SELECT id, name, email, active, fav_color, fav_numbers, properties, created_at
FROM accounts
ORDER BY id
`

func (q *Queries) SelectAllAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, selectAllAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Active,
			&i.FavColor,
			&i.FavNumbers,
			&i.Properties,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectAllAccountsByFilter = `-- name: SelectAllAccountsByFilter :many
SELECT id, name, email, active, fav_color, fav_numbers, properties, created_at
FROM accounts
WHERE (CASE WHEN $1::bool THEN name = ANY($2::text[]) ELSE TRUE END)
  AND (CASE WHEN $3::bool THEN active = $4 ELSE TRUE END)
  AND (CASE WHEN $5::bool THEN fav_color = ANY($6::COLORS[]) ELSE TRUE END)
`

type SelectAllAccountsByFilterParams struct {
	AnyNames    bool     `json:"any_names"`
	Names       []string `json:"names"`
	IsActive    bool     `json:"is_active"`
	Active      bool     `json:"active"`
	AnyFavColor bool     `json:"any_fav_color"`
	FavColors   []Colors `json:"fav_colors"`
}

func (q *Queries) SelectAllAccountsByFilter(ctx context.Context, arg SelectAllAccountsByFilterParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, selectAllAccountsByFilter,
		arg.AnyNames,
		arg.Names,
		arg.IsActive,
		arg.Active,
		arg.AnyFavColor,
		arg.FavColors,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Active,
			&i.FavColor,
			&i.FavNumbers,
			&i.Properties,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
