// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package model

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Colors string

const (
	ColorsRed   Colors = "red"
	ColorsGreen Colors = "green"
	ColorsBlue  Colors = "blue"
)

func (e *Colors) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Colors(s)
	case string:
		*e = Colors(s)
	default:
		return fmt.Errorf("unsupported scan type for Colors: %T", src)
	}
	return nil
}

type NullColors struct {
	Colors Colors `json:"colors"`
	Valid  bool   `json:"valid"` // Valid is true if Colors is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullColors) Scan(value interface{}) error {
	if value == nil {
		ns.Colors, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Colors.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullColors) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Colors), nil
}

type Account struct {
	ID         int64              `json:"id"`
	Name       string             `json:"name"`
	Email      string             `json:"email"`
	Active     bool               `json:"active"`
	FavColor   NullColors         `json:"fav_color"`
	FavNumbers []int32            `json:"fav_numbers"`
	Properties []byte             `json:"properties"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}
